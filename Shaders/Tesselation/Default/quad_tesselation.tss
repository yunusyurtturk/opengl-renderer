#version 410 core
layout( quads, equal_spacing, ccw) in;

uniform mat4 gVP;
uniform mat4 gWP;
uniform sampler2D gSampler;

in vec2 TextureCoord[];
in vec3 NormalC[];
out vec2 FragTexCoord;
out float Height;

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec2 t00 = TextureCoord[0];
    vec2 t01 = TextureCoord[1];
    vec2 t10 = TextureCoord[2];
    vec2 t11 = TextureCoord[3];

    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 texCoord = (t1 - t0) * v + t0;
    FragTexCoord = texCoord;

    vec3 n00 = NormalC[0];
    vec3 n01 = NormalC[1];
    vec3 n10 = NormalC[2];
    vec3 n11 = NormalC[3];

    vec3 n0 = (n01 - n00) * u + n00;
    vec3 n1 = (n11 - n10) * u + n10;
    vec3 NormalE = (n1 - n0) * v + n0;



    Height = texture(gSampler, texCoord).r ;

    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    vec4 normal = normalize( vec4(cross(vVec.xyz, uVec.xyz), 0) );
    normal = normalize(vec4(NormalE, 0));

    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0 + normal * Height * 0.3;

    //gl_Position = projection * view * model * p;
    gl_Position = gVP * gWP * p;
}